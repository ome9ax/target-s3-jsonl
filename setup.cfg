[metadata]
name = target-s3-jsonl
version = attr: target_s3_jsonl.__version__
description = Singer.io target for writing JSON Line files and upload to S3
long_description = file: README.md
long_description_content_type = text/markdown
author = Eddy âˆ†
author_email = edrdelta@gmail.com
url = https://github.com/ome9ax/target-s3-jsonl
keywords = target-s3-jsonl, target-s3-json, singer, singer.io, tap, target, etl, json, jsonl, aws, s3
license = Apache License 2.0
classifiers =
    Development Status :: 5 - Production/Stable
    Operating System :: OS Independent
    License :: OSI Approved :: Apache Software License
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10

[options]
packages = find:
package_dir =
    = src
# py_modules = target_s3_jsonl
python_requires = >=3.8
# install_requires = file: requirements.txt
# install_requires =
#     jsonschema==4.9.1
#     boto3==1.24.52
#     backoff==2.1.2
include_package_data = True
platforms = any

[options.entry_points]
console_scripts =
    target-s3-jsonl = target_s3_jsonl:main

[options.package_data]
target_s3_jsonl = logging.conf

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
test =
    pytest-cov
    moto[s3,sts]
lint = flake8
static = mypy
dist = build
deploy = twine

[tool:pytest]
addopts = -v --cov=target_s3_jsonl --cov-fail-under 95 --cov-report annotate --cov-report xml --cov-report term --cov-report html:htmlcov --doctest-modules
testpaths = tests
asyncio_mode = auto

[coverage:run]
branch = True
omit =
    ./setup.py
    tests/.*
    venv/*

[coverage:report]
show_missing = True
skip_covered = False
exclude_lines =
    if __name__ == .__main__.:

[flake8]
count = True
show-source = True
statistics = True
extend-exclude = venv
    build
ignore = C901
max-line-length = 160
max-complexity = 10

[build_sphinx]
builder = html
warning-is-error = true
# keep-going = true
project = 'Target S3 Jsonl'
version = attr: target_s3_jsonl.__version__
release = attr: target_s3_jsonl.__version__
source-dir = 'docs'

[tox:tox]
passenv = TOXENV TOX_* CI_* GITLAB_*
# requires = tox-pipenv
envlist = py{38,39,310}
# labels =
#     test = py{39,310,pi}
#     static = flake8, mypy
# envlist = .virtualenvs/target-s3-jsonl
isolated_build = True
# skipsdist = false
# parallel_show_output=True

# requires = tox-pip-extensions
# tox_pip_extensions_ext_venv_update = true

[testenv]
usedevelop = True
extras = test
commands = pytest {posargs}
    # publish: python setup.py sdist upload --sign -r pypi
    # publish: echo Publish that

[testenv:lint]
usedevelop = True
skip_install = true
deps = flake8
commands = flake8 {posargs}

[testenv:static]
usedevelop = True
skip_install = true
deps = mypy
commands = mypy {posargs}

[testenv:coverage]
usedevelop = True
passenv = CODECOV_TOKEN CI_*
skip_install = true
deps = codecov
# allowlist_externals = gpg
# install_command = echo Install codecov {packages}
#     curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
#     curl -Os https://uploader.codecov.io/latest/linux/codecov
#     curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
#     curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
#     gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
#     shasum -a 256 -c codecov.SHA256SUM
#     chmod +x ./codecov
commands = 
    codecov \
    --file "{toxinidir}/coverage.xml" \
    --name "codecov-$CI_PROJECT_NAME" \
    --branch "$CI_COMMIT_BRANCH" \
    --commit "$CI_COMMIT_SHA" \
    --tag "$CI_COMMIT_TAG" \
    --flags "unittests" {posargs} || echo 'Codecov upload failed'

[testenv:docs]
# https://packaging-guide.openastronomy.org/en/latest/docs.html
# Init
# sphinx-quickstart docs; cd docs
# edit index.rst >>> add modules
# sphinx-apidoc -o docs .
# sphinx-apidoc -o /source/_modules src
# sphinx-build docs docs/_build/html -W -j auto --color -b html
description = Invoke sphinx-build to build the HTML docs
usedevelop = True
extras = docs
# commands_pre = sphinx-build docs/source "{toxworkdir}/docs_out" -d "{toxworkdir}/docs_doctree" -b doctest {posargs:-E}
# commands = sphinx-build docs docs/_build/html -W -j auto --color -Ea -b html {posargs}
commands = sphinx-build docs/source "{toxworkdir}/docs_out" -d "{toxworkdir}/docs_doctree" -W -j auto --color -b html {posargs}
commands_post = python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{toxworkdir}") / "docs_out" / "index.html"))'
    # sphinx-build docs/source "{toxworkdir}/docs_out" -d "{toxworkdir}/docs_doctree" -b linkcheck {posargs:-E}

[testenv:dist]
deps = build
commands = python -m build

[testenv:deploy]
usedevelop = True
skip_install = true
# depends = dist
passenv = TWINE_*
deps =
    build
    twine
commands_pre =
    python -m build
    twine check dist/*
commands = twine upload --skip-existing {posargs} dist/*
