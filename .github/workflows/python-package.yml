# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches:
    tags:
  # pull_request:
  #   branches: [ main ]
  release:
    types: [ published ] #, created, edited

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        project: ['target-s3-jsonl']
        # os: [ubuntu-latest]
        os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: [3.8, pypy3]
        # python-version: [3.8, 3.9]
        python-version: [3.9]
        # exclude:
        #   - os: macos-latest
        #     python-version: 3.8
        #   - os: macos-latest
        #     python-version: 3.7
        #   - os: windows-latest
        #     python-version: 3.6
        #   - os: windows-latest
        #     python-version: 3.7

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip Linux
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache pip macOS
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache pip Windows
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m venv venv || virtualenv venv
        . venv/bin/activate
        pip install --upgrade pip # setuptools
        pip install .[test,lint,dist]

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Dry Lint with flake8
      run: |
        . venv/bin/activate
        # pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 255 chars wide
        flake8 --count --exit-zero --statistics
    - name: Test
      run: |
        . venv/bin/activate
        # pip install pytest-cov
        # pytest tests -v --cov=${{ matrix.project }}
        # pytest tests -v --doctest-modules -o junit_family=xunit2 --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=com --cov-report=xml --cov-report=html
        pytest
    # - name: Generate coverage report
    #   run: |
    #     . venv/bin/activate
    #     pip install coverage
    #     coverage run -m pytest
    #     coverage xml
    #     coverage html
    - name: Upload coverage test results to Codecov
      uses: codecov/codecov-action@v2
      if: |
        ${{ matrix.python-version }} == '3.8' \
        && ${{ matrix.os-version }} == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        file: coverage.xml # optional
        flags: unittests # optional
        name: codecov-${{ matrix.project }} # optional
        env_vars: OS,PYTHON
        fail_ci_if_error: true # optional (default = false)
        verbose: false # optional (default = false)

    - name: Build distribution package
      run: |
        . venv/bin/activate
        # pip install wheel
        python setup.py sdist bdist_wheel
        # pip install dist/test-package-0.0.1.tar.gz
        ls -l dist
    - name: Publish distribution package to TestPyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        verify_metadata: true
        skip_existing: true
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Publish distribution package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        verify_metadata: true
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: Uninstall Dependencies
      run: |
        . venv/bin/activate
        if [ -f requirements.txt ]; then pip uninstall -y -r requirements.txt; fi
